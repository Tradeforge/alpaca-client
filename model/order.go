package model

import (
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Order represents an order entity.
//
// | Attribute          | Type             | Notes                                                                                                                                                                                 |
// |--------------------|------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
// | `id`               | string/UUID      | Order ID generated by Alpaca                                                                                                                                                          |
// | `client_order_id`  | string/UUID      | Client unique order ID                                                                                                                                                                |
// | `created_at`       | string/timestamp | Time when order was entered                                                                                                                                                                                      |
// | `updated_at`       | string/timestamp | Time of most recent change to the order                                                                                                                                                                        |
// | `submitted_at`     | string/timestamp | Time the order was submitted for execution or, if not yet submitted the `created_at` time. Because orders are submitted for execution asynchronous to database updates, at times this may be before the `created_at` time.                                                                                                                                                                         |
// | `filled_at`        | string/timestamp | Time the order was filled. Can be `null` if not filled                                                                                                                                                                        |
// | `expired_at`       | string/timestamp | Can be `null`                                                                                                                                                                         |
// | `cancelled_at`     | string/timestamp | Can be `null`                                                                                                                                                                         |
// | `failed_at`        | string/timestamp | Can be `null`                                                                                                                                                                         |
// | `replaced_at`      | string/timestamp | Can be `null`                                                                                                                                                                         |
// | `replaced_by`      | string/UUID      | The order ID that this order was replaced by. (Can be `null`)                                                                                                                         |
// | `replaces`         | string/UUID      | The order ID that this order replaces. (Can be `null`)                                                                                                                                |
// | `asset_id`         | string/UUID      | The asset ID                                                                                                                                                                          |
// | `symbol`           | string           | The asset symbol                                                                                                                                                                      |
// | `asset_class`      | string           | The asset class                                                                                                                                                                       |
// | `notional`         | string/number    | Ordered notional amount. If entered, `qty` will be null. Can take up to 9 decimal points.                                                                                             |
// | `qty`              | string/number    | Ordered quantity. If entered, `notional` will be null. Can take up to 9 decimal points.                                                                                               |
// | `filled_qty`       | string/number    | Filled quantity                                                                                                                                                                       |
// | `filled_avg_price` | string/number    | Filled average price. Can be 0 until order is processed in case order is passed outside of market hours                                                                               |
// | `order_class`      | string           | Valid values: `simple`, `bracket`, `oco` or `oto`                                                                                                                                     |
// | `order_type`       | string/number    | (Deprecated with just `type` field below.)                                                                                                                                            |
// | `type`             | string           | Valid values: `market`, `limit`, `stop`, `stop_limit`, `trailing_stop`                                                                                                                |
// | `side`             | string           | Valid values: `buy` and `sell`                                                                                                                                                        |
// | `time_in_force`    | string           | Please see the relevant section in [Understand Orders]({{< relref "../../../../trading/orders/#time-in-force" >}}) for more info on what values are possible for what kind of orders. |
// | `limit_price`      | string/number    | Limit price                                                                                                                                                                           |
// | `stop_price`       | string/number    | Stop price                                                                                                                                                                            |
// | `status`           | string           | [Enum.OrderStatus]({{< relref "#order-status" >}})                                                                                                                                    |
// | `extended_hours`   | boolean          | If true, eligible for execution outside regular trading hours.                                                                                                                        |
// | `legs`             | array            | When querying non-simple order_class orders in a nested style, an array of Order entities associated with this order. Otherwise, null.                                                |
// | `trail_percent`    | string/number    | The percent value away from the high water mark for trailing stop orders.                                                                                                             |
// | `trail_price`      | string/number    | The dollar value away from the high water mark for trailing stop orders.                                                                                                              |
// | `hwm`              | string/number    | The highest (lowest) market price seen since the trailing stop order was submitted.                                                                                                   |
// | `commission`       | string/number    | The dollar value commission you want to charge the end user.                                                                                                                          |
// | `swap_rate`        | string/number    | Swap rate is the exchange rate (without mark-up) used to convert the price into local currency or crypto asset |
// | `swap_fee_bps`     | string/number    | Fee in basis points on top swap rate charged by the correspondent on every order |
// | `usd`              | object           | Nested object to encompass the USD equivalent fields for the local currency fields |
type Order struct {
	ID             uuid.UUID        `json:"id"`
	ClientOrderID  uuid.UUID        `json:"client_order_id"`
	Type           string           `json:"type"`
	Side           string           `json:"side"`
	Symbol         string           `json:"symbol"`
	AssetID        string           `json:"asset_id"`
	AssetClass     string           `json:"asset_class"`
	Notional       *decimal.Decimal `json:"notional,omitempty"`
	Quantity       *decimal.Decimal `json:"qty,omitempty"`
	FilledQuantity *decimal.Decimal `json:"filled_qty,omitempty"`
	FilledAvgPrice *decimal.Decimal `json:"filled_avg_price,omitempty"`
	OrderClass     string           `json:"order_class"`
	OrderType      string           `json:"order_type"`
	TimeInForce    string           `json:"time_in_force"`
	LimitPrice     *decimal.Decimal `json:"limit_price,omitempty"`
	StopPrice      *decimal.Decimal `json:"stop_price,omitempty"`
	ExtendedHours  bool             `json:"extended_hours"`
	Legs           []Order          `json:"legs"`
	TrailPercent   *decimal.Decimal `json:"trail_percent,omitempty"`
	TrailPrice     *decimal.Decimal `json:"trail_price,omitempty"`
	HWM            *string          `json:"hwm,omitempty"`
	Commission     decimal.Decimal  `json:"commission"`
	CommissionType *string          `json:"commission_type"`
	SwapRate       *decimal.Decimal `json:"swap_rate"`
	SwapFeeBPS     *decimal.Decimal `json:"swap_fee_bps"`
	CreatedAt      time.Time        `json:"created_at"`
	UpdatedAt      time.Time        `json:"updated_at"`
	SubmittedAt    *time.Time       `json:"submitted_at"`
	FilledAt       *time.Time       `json:"filled_at"`
	ExpiredAt      *time.Time       `json:"expired_at"`
	CancelledAt    *time.Time       `json:"cancelled_at"`
	FailedAt       *time.Time       `json:"failed_at"`
	ReplacedAt     *time.Time       `json:"replaced_at"`
	ReplacedBy     *uuid.UUID       `json:"replaced_by"`
	Replaces       *uuid.UUID       `json:"replaces"`
	Status         string           `json:"status"`
}

type CreateOrderRequest struct {
	Symbol          string           `json:"symbol"`
	Quantity        *decimal.Decimal `json:"qty"`
	Notional        *decimal.Decimal `json:"notional,omitempty"`
	Side            string           `json:"side"`
	Type            string           `json:"type"`
	TimeInForce     string           `json:"time_in_force"`
	LimitPrice      *decimal.Decimal `json:"limit_price,omitempty"`
	StopsPrice      *decimal.Decimal `json:"stop_price,omitempty"`
	TrailPrice      *decimal.Decimal `json:"trail_price,omitempty"`
	TrailPercent    *decimal.Decimal `json:"trail_percent,omitempty"`
	TakeProfitPrice *TakeProfitPrice `json:"take_profit,omitempty"`
	ClientOrderID   string           `json:"client_order_id"`
	Commission      decimal.Decimal  `json:"commission,omitempty"`
	CommissionType  *CommissionType  `json:"commission_type,omitempty"`
	ExtendedHours   bool             `json:"extended_hours"`
}

// CommissionType is an enum to select how to interpret the value provided in the commission field.
//
// notional:
// Charge commission on a per order basis. (When the commission_type field is omitted from the order request, this is used as the default).
//
// qty:
// Charge commission on a per qty/contract basis, pro rated.
//
// bps:
// The percent commission you want to charge the end user on the order (expressed in bps). Alpaca will convert the order to a notional amount for purposes of calculating commission.
type CommissionType string

const (
	CommissionTypeNotional CommissionType = "notional"
	CommissionTypeQty      CommissionType = "qty"
	CommissionTypeBPS      CommissionType = "bps"
)

type TakeProfitPrice struct {
	LimitPrice decimal.Decimal `json:"limit_price"`
}

type CreateOrderParams struct {
	AccountID string `path:"id"`
}

type CreateOrderResponse struct {
	Order
}

type GetOrderParams struct {
	AccountID string `path:"id"`
	OrderID   string `path:"order_id"`
}

type GetOrderResponse struct {
	Order
}

type ListOrdersParams struct {
	AccountID string    `path:"id"`
	Limit     int       `query:"limit"`
	After     time.Time `query:"after"`
	Until     time.Time `query:"until"`
	Direction string    `query:"direction"`
	Symbols   []string  `query:"symbols"`
	Status    string    `query:"status"`
}

type ListOrdersResponse = []Order
